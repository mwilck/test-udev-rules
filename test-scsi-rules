#! /bin/bash
set -E
trap 'trap - ERR; echo "$0: error in $BASH_COMMAND on line $LINENO" >&2; exit 1' ERR
trap 'trap - 0; eval "$CLEANUP"' INT TERM EXIT

# prevent errors in "printf"
export LC_ALL=C LC_NUMERIC=C
CLEANUP=:
ME=$(basename "$0")

TMPD=$(mktemp -d /tmp/rules.XXXXXX)
RULESD=/tmp/test_scsi_rules
CLEANUP="rm -rf $TMPD;$CLEANUP"


COMMIT=last-scsi_id
SYSTEMD_GIT=https://raw.githubusercontent.com/mwilck/systemd-1/$COMMIT/rules
SG3_GIT=https://raw.githubusercontent.com/mwilck/sg3_utils/master/scripts

SHA1SUMS="\
0db90b985cd11a317d7fa4a1eaba556017f9b489  54-storage-hardware.rules
e748da466ece4e8e29745c16e55ca2419cd3b638  55-scsi-sg3_id.rules
9582c6924cd00d5443a2b694a6220ab3c460c683  55-zz-scsi_id.rules
9952600a396efc6baa5fd2aebc418355270c1f42  58-cdrom_id.rules
63274829f3b94ea91e1cf118a79cce92dd672dc0  59-storage-content.rules
da39a3ee5e6b4b0d3255bfef95601890afd80709  60-cdrom_id.rules
beee2c557ccb0a22e6e4f89a0eb424287b14cb45  60-persistent-storage.rules
af1974203de01b385a9a55427cecfa3326a23ca1  60-persistent-storage-tape.rules"

UDEV_RULES="55-zz-scsi_id.rules 54-storage-hardware.rules \
58-cdrom_id.rules 59-storage-content.rules \
60-persistent-storage.rules 60-persistent-storage-tape.rules"
SG3_RULES="55-scsi-sg3_id.rules"
ALL_RULES="$UDEV_RULES $SG3_RULES 60-cdrom_id.rules"
TEST_RULES="10-test-scsi.rules"

# These rules are present on some SUSE distros to provide backward
# compatibility towards older releases.
# For the purpose of this test, they generate artefacts.
COMPAT_RULES="61-persistent-storage-compat.rules 59-scsi-cciss_id.rules"

check_reqs() {
    local p
    for p in systemctl udevadm curl tar sha1sum sg_inq; do
	type $p &>/dev/null || {
	    echo "program \"$p\" not found, please install it first" >&2
	    exit 1
	}
    done
}

fetch_rules() {
    local f r
    pushd "$RULESD" >/dev/null
    sha1sum -c <<<"$SHA1SUMS" &>/dev/null && return 0
    echo "$ME: fetching rules from github" >&2
    for f in $UDEV_RULES; do
	curl -s -o "$f" "$SYSTEMD_GIT/$f"
    done
    for f in $SG3_RULES; do
	curl -s -o "$f" "$SG3_GIT/$f"
    done
    >60-cdrom_id.rules
    sha1sum -c <<<"$SHA1SUMS"
    r=$?
    popd >/dev/null
    return $r
}

check_etc_rulesd() {
    local f
    for f in $ALL_RULES $TEST_RULES 55-storage-hardware.rules \
			58-scsi-sg3_symlink.rules \
			$COMPAT_RULES; do
	# Don't overwrite any existing system rules
	[[ ! -e "/etc/udev/rules.d/$f" ]] || {
	    echo "/etc/udev/rules.d/$f exists - aborting" >&2
	    exit 1
	}
    done
}

disable_sg3() {
    local x
    for x in $SG3_RULES 58-scsi-sg3_symlink.rules; do
	>"/etc/udev/rules.d/$x"
    done
}

disable_compat() {
    local f
    # Disable compat rules, they generate artefacts
    # This will be undone by cleanup_rules
    for f in $COMPAT_RULES; do
	>/etc/udev/rules.d/$f
    done
}

enable_sg3() {
    local x
    for x in $SG3_RULES 58-scsi-sg3_symlink.rules; do
	rm -f "/etc/udev/rules.d/$x"
    done
}

prefer_sg_inq() {
    cat >"/etc/udev/rules.d/$TEST_RULES" <<EOF
SUBSYSTEMS=="scsi", ENV{ID_SCSI_INQUIRY}="0"
EOF
}

cleanup_rules() {
    for x in $ALL_RULES 58-scsi-sg3_symlink.rules \
			$COMPAT_RULES; do
	rm -f "/etc/udev/rules.d/$x"
    done
}

get_devices() {
    pushd /sys >/dev/null
    DEVICES=($(ls -d block/cciss* block/sd*[a-z] block/sd*[a-z]/sd*[0-9] block/sr* class/scsi_tape/{n,}st*[0-9] class/scsi_generic/* class/scsi_changer/* 2>/dev/null || true))
    popd >/dev/null
}
do_test() {
    local dir=$1 dev st en tim
    echo "$ME: running test \"$1\"" >&2
    mkdir -p "$TMPD/$dir"
    pushd "$TMPD/$dir" >/dev/null
    ### DO NOT systemctl restart systemd-udevd, NOT NECESSARY.
    for dev in "${DEVICES[@]}"; do
	mkdir -p $(dirname "$dev")
    done
    st=$(date +%s.%N)
    for dev in "${DEVICES[@]}"; do
	udevadm test "/$dev" >"$dev.txt" 2>"$dev.err" || true
    done
    en=$(date +%s.%N)
    tim=$(echo $en $st - p | dc)
    printf "$ME: test \"$1\" took %.2f s\\n" $tim >&2
    popd >/dev/null
}

[[ -d "$RULESD" ]] || mkdir "$RULESD"

check_reqs
check_etc_rulesd
fetch_rules

CLEANUP='cleanup_rules;'"$CLEANUP"

disable_compat

get_devices
[[ ${#DEVICES[@]} -gt 0 ]] || {
    echo "$ME: no SCSI devices found" >&2
    exit 1
}
echo "$ME: ${#DEVICES[@]} SCSI devices will be checked" >&2

do_test 00-before

# sg3_utils reading sysfs inquiry attributes
for r in $ALL_RULES; do
    cp -a "$RULESD/$r" /etc/udev/rules.d
done

do_test 01-sysfs

# sg3_utils calling sg_inq
prefer_sg_inq
do_test 02-inquiry

# sg3_utils deactivated - using scsi_id
rm "/etc/udev/rules.d/$TEST_RULES"
disable_sg3
do_test 03-scsi_id
enable_sg3

cleanup_rules
disable_compat
disable_sg3
do_test 04-nosg3
enable_sg3

rm -f "/etc/udev/rules.d/$SG3_RULES"
do_test 05-after

echo "$ME: creating result file $TMPD.tar.gz" >&2
tar cz -C /tmp -f "${TMPD}.tar.gz" "${TMPD#/tmp/}"
echo "$ME: done, thanks. Please send results to <mwilck@suse.com>" >&2
echo "$ME: run 'check-results ${TMPD}.tar.gz' to inspect" >&2
