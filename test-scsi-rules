#! /bin/bash
set -E
trap 'trap - ERR; echo "$0: error in $BASH_COMMAND on line $LINENO" >&2; exit 1' ERR
trap 'trap - 0; eval "$CLEANUP"' INT TERM 0

CLEANUP=:
ME=$(basename "$0")

TMPD=$(mktemp -d /tmp/rules.XXXXXX)
RULESD=/tmp/test_scsi_rules
CLEANUP="rm -rf $TMPD;$CLEANUP"

SYSTEMD_GIT=https://raw.githubusercontent.com/mwilck/systemd-1/last-scsi_id/rules
SG3_GIT=https://raw.githubusercontent.com/mwilck/sg3_utils/master/scripts

SHA1SUMS="\
1d54403728625cc9d497517b4afa0154eaa4a83b  55-scsi-sg3_id.rules
0db90b985cd11a317d7fa4a1eaba556017f9b489  55-storage-hardware.rules
e02dfd251ea783052d6a83fbcbc3918aa0f4efa8  55-zz-scsi_id.rules
d26ea6d4ebf53b3c55f7f97c81e3e453cecb88cb  59-storage-content.rules
b0823527057a08609c511dcf386bcbb6778bf108  60-persistent-storage.rules
af1974203de01b385a9a55427cecfa3326a23ca1  60-persistent-storage-tape.rules"

UDEV_RULES="55-zz-scsi_id.rules 55-storage-hardware.rules \
59-storage-content.rules 60-persistent-storage.rules \
60-persistent-storage-tape.rules"
SG3_RULES="55-scsi-sg3_id.rules"
ALL_RULES="$UDEV_RULES $SG3_RULES"
TEST_RULES="10-test-scsi.rules"

check_reqs() {
    local p
    for p in systemctl udevadm curl tar sha1sum sg_inq; do
	type $p &>/dev/null || {
	    echo "program \"$p\" not found, please install it first" >&2
	    exit 1
	}
    done
}

fetch_rules() {
    local f r
    pushd "$RULESD" >/dev/null
    sha1sum -c <<<"$SHA1SUMS" &>/dev/null && return 0
    echo "$ME: fetching rules from github" >&2
    for f in $UDEV_RULES; do
	curl -s -o "$f" "$SYSTEMD_GIT/$f"
    done
    for f in $SG3_RULES; do
	curl -s -o "$f" "$SG3_GIT/$f"
    done
    sha1sum -c <<<"$SHA1SUMS"
    r=$?
    popd >/dev/null
    return $r
}

check_etc_rulesd() {
    local f
    for f in $ALL_RULES $TEST_RULES; do
	# Don't overwrite any existing system rules
	[[ ! -e "/etc/udev/rules.d/$f" ]] || {
	    echo "/etc/udev/rules.d/$f exists - aborting" >&2
	    exit 1
	}
    done
}

cleanup_rules() {
    for x in $ALL_RULES; do
	rm -f "/etc/udev/rules.d/$x"
    done
}
get_devices() {
    pushd /sys >/dev/null
    DEVICES=($(ls -d block/cciss* block/sd* class/scsi_tape/{n,}st*[0-9] class/scsi_generic/* class/scsi_changer/* 2>/dev/null || true))
    popd >/dev/null
}

do_test() {
    local dir=$1 dev
    echo "$ME: running test \"$1\"" >&2
    mkdir -p "$TMPD/$dir"
    pushd "$TMPD/$dir" >/dev/null
    systemctl restart systemd-udevd
    for dev in "${DEVICES[@]}"; do
	mkdir -p $(dirname "$dev")
	udevadm test "/$dev" >"$dev.txt" 2>"$dev.err" || true
    done
    popd >/dev/null
}

[[ -d "$RULESD" ]] || mkdir "$RULESD"

check_reqs
check_etc_rulesd
fetch_rules

get_devices
[[ ${#DEVICES[@]} -gt 0 ]] || {
    echo "$ME: no SCSI devices found" >&2
    exit 1
}
echo "$ME: ${#DEVICES[@]} SCSI devices will be checked" >&2

do_test 00-before

# sg3_utils reading sysfs inquiry attributes
CLEANUP='cleanup_rules;'"$CLEANUP"
cp -a $RULESD/*.rules /etc/udev/rules.d
do_test 01-sysfs

cat >"/etc/udev/rules.d/$TEST_RULES" <<EOF
SUBSYSTEMS=="scsi", ENV{ID_SCSI_INQUIRY}="0"
EOF
# sg3_utils calling sg_inq
do_test 02-inquiry

# sg3_utils deactivated - using scsi_id
rm "/etc/udev/rules.d/$TEST_RULES"
>"/etc/udev/rules.d/$SG3_RULES"
do_test 03-scsi_id

cleanup_rules
do_test 04-after

echo "$ME: creating result file $TMPD.tar.gz" >&2
(cd /; tar cfz "$TMPD.tar.gz" "${TMPD#/}")
echo "$ME: done, thanks. Please send results to <mwilck@suse.com>" >&2
